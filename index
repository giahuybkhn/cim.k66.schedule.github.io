<!doctype html>
<html lang="vi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Điền lịch 168</title>
  <style>
    :root { --radius: 14px; }
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 0; background: #f7f7fb; color:#111; }
    .wrap { max-width: 920px; margin: 32px auto; padding: 0 16px; }
    .card { background: #fff; border-radius: var(--radius); box-shadow: 0 10px 24px rgba(0,0,0,0.06); padding: 20px; }
    h1 { font-size: 22px; margin: 0 0 12px; }
    .muted { color: #555; font-size: 14px; margin-bottom: 18px; }
    label { display:block; font-weight:600; margin: 10px 0 6px; }
    input[type="text"] { width: 100%; padding: 12px 14px; border: 1px solid #ddd; border-radius: 10px; font-size: 15px; }
    .days { display: grid; gap: 14px; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); margin-top: 16px; }
    .day { border: 1px solid #eee; border-radius: 12px; padding: 12px; background:#fff; }
    .day h3 { margin: 0 0 10px; font-size: 16px; }
    .slot { display:flex; gap:8px; align-items:center; margin: 6px 0; }
    .slot input[type="time"] { flex:1; padding: 8px; border:1px solid #ddd; border-radius:10px; font-size:14px; }
    .slot button { border:0; background:#eee; border-radius:10px; padding: 8px 10px; cursor:pointer; }
    .addbtn { margin-top: 8px; background: #111; color:#fff; padding: 8px 10px; border-radius: 10px; font-size: 13px; cursor:pointer; }
    .actions { display:flex; gap:10px; margin-top: 18px; }
    .submit { background:#2563eb; color:#fff; border:0; padding:12px 16px; border-radius:12px; font-weight:600; cursor:pointer; }
    .ghost  { background:#efefef; color:#111; border:0; padding:12px 16px; border-radius:12px; cursor:pointer; }
    .note { font-size: 13px; color:#444; margin-top: 12px; }
    .ok { background: #e7f7ec; border-left: 4px solid #16a34a; padding: 10px 12px; border-radius: 8px; margin-top: 14px; display:none; }
    .err { background: #fdeaea; border-left: 4px solid #dc2626; padding: 10px 12px; border-radius: 8px; margin-top: 14px; display:none; white-space:pre-wrap;}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <h1>Điền lịch 168</h1>
      <div class="muted">Nhập <b>Họ và tên</b> và chọn các <b>khung giờ</b> cho từng ngày (có thể thêm nhiều khung/Ngày). Phút sẽ được làm tròn: ≤15 → :00; 15–&lt;45 → :30; ≥45 → tròn lên giờ.</div>

      <label for="name">Họ và tên</label>
      <input id="name" placeholder="Ví dụ: Nguyễn Văn A" />

      <div class="days" id="days"></div>

      <div class="actions">
        <button class="submit" id="submitBtn">Gửi lịch lên Google Sheet</button>
        <button class="ghost" id="resetBtn">Xoá tất cả</button>
      </div>
      <div class="note">Sau khi gửi, sheet mới sẽ được tạo (nếu chưa có) dựa trên sheet <b>MẪU</b> và tự động tô màu cam các ô thời gian trong lưới 168.</div>
      <div class="ok" id="okBox">Đã gửi! Mở Google Sheet để xem cập nhật.</div>
      <div class="err" id="errBox"></div>
    </div>
  </div>

  <script>
    // === CẦN ĐIỀN: URL Web App của Apps Script ===
    const WEB_APP_URL = 'https://script.google.com/macros/s/AKfycby1CQcmTTKdcMjq65HPGBwpkclFAfZnRhWnV88eGPD336cA71cM3Lr_u4RnFwizHFbM0w/exec';

    const DAY_LABELS = [
      ['thu2', 'Thứ 2'], ['thu3','Thứ 3'], ['thu4','Thứ 4'], ['thu5','Thứ 5'],
      ['thu6','Thứ 6'], ['thu7','Thứ 7'], ['cn','CN']
    ];

    const daysEl = document.getElementById('days');

    function createDayCard(key, label) {
      const box = document.createElement('div');
      box.className = 'day';
      box.innerHTML = `<h3>${label}</h3><div class="slots"></div><button class="addbtn" type="button">+ Thêm khung giờ</button>`;
      const slotsEl = box.querySelector('.slots');
      const addBtn = box.querySelector('.addbtn');

      function addSlot(from='08:00', to='10:00') {
        const row = document.createElement('div');
        row.className = 'slot';
        row.innerHTML = `
          <input type="time" value="${from}" step="900" />
          <span>→</span>
          <input type="time" value="${to}" step="900" />
          <button type="button" title="Xoá">✕</button>
        `;
        const delBtn = row.querySelector('button');
        delBtn.onclick = () => row.remove();
        slotsEl.appendChild(row);
      }

      addBtn.onclick = () => addSlot();
      // mặc định có 0 slot; user tự thêm
      return { box, getValue: () => {
        const slots = [];
        box.querySelectorAll('.slot').forEach(div => {
          const t1 = div.querySelectorAll('input')[0].value;
          const t2 = div.querySelectorAll('input')[1].value;
          if (t1 && t2) slots.push([t1, t2]);
        });
        return [key, slots];
      }};
    }

    const dayCards = DAY_LABELS.map(([k,l]) => createDayCard(k,l));
    dayCards.forEach(d => daysEl.appendChild(d.box));

    // Làm tròn phút theo yêu cầu
    function roundToGrid(hhmm) {
      let [h, m] = hhmm.split(':').map(x=>parseInt(x,10));
      if (isNaN(h) || isNaN(m)) return hhmm;
      if (m <= 15) m = 0;
      else if (m < 45) m = 30;
      else { h = (h + 1) % 24; m = 0; }
      const hh = (h<10?'0':'') + h;
      const mm = (m<10?'0':'') + m;
      return `${hh}:${mm}`;
    }

    function normalizeAndSort(slots) {
      const norm = slots.map(([a,b]) => {
        const s = roundToGrid(a);
        const e = roundToGrid(b);
        return [s,e];
      }).filter(([s,e]) => s && e && s !== e);

      // sort theo start
      norm.sort((A,B) => A[0].localeCompare(B[0]));
      return norm;
    }

    function payloadFromUI() {
      const name = document.getElementById('name').value.trim();
      const days = {};
      dayCards.forEach(c => {
        const [key, slots] = c.getValue();
        days[key] = normalizeAndSort(slots);
      });
      return { name, days };
    }

    // Gửi bằng <form> ẩn để tránh CORS preflight (x-www-form-urlencoded)
    function postPayload(payload) {
      return new Promise((resolve, reject) => {
        try {
          const form = document.createElement('form');
          form.method = 'POST';
          form.action = WEB_APP_URL;
          form.style.display = 'none';
          // target vào 1 iframe ẩn để không rời trang
          const iframe = document.createElement('iframe');
          iframe.name = 'hidden_iframe';
          iframe.style.display = 'none';
          document.body.appendChild(iframe);
          form.target = 'hidden_iframe';

          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = 'payload';
          input.value = JSON.stringify(payload);
          form.appendChild(input);

          // Lắng nghe load của iframe coi như success (Apps Script trả HTML)
          iframe.onload = () => {
            resolve();
            setTimeout(() => iframe.remove(), 1000);
          };

          document.body.appendChild(form);
          form.submit();
          setTimeout(() => form.remove(), 1000);
        } catch (e) {
          reject(e);
        }
      });
    }

    const okBox = document.getElementById('okBox');
    const errBox = document.getElementById('errBox');
    const submitBtn = document.getElementById('submitBtn');
    const resetBtn = document.getElementById('resetBtn');

    submitBtn.onclick = async () => {
      okBox.style.display = 'none';
      errBox.style.display = 'none';
      try {
        const payload = payloadFromUI();
        if (!payload.name) throw new Error('Vui lòng nhập Họ và tên');
        await postPayload(payload);
        okBox.style.display = 'block';
        okBox.textContent = 'Đã gửi! Mở Google Sheet để xem sheet của bạn được tạo/cập nhật và tô màu.';
      } catch (e) {
        errBox.style.display = 'block';
        errBox.textContent = 'Gửi thất bại:\n' + (e && e.message ? e.message : e);
      }
    };

    resetBtn.onclick = () => {
      document.getElementById('name').value = '';
      document.querySelectorAll('.slots').forEach(x => x.innerHTML = '');
      okBox.style.display = 'none';
      errBox.style.display = 'none';
    };
  </script>
</body>
</html>
