<!doctype html>
<html lang="vi">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Điền lịch làm việc</title>
  <style>
    :root { --radius: 14px; }
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 0; background: #f7f7fb; color:#111; }
    .wrap { max-width: 920px; margin: 32px auto; padding: 0 16px; }
    .card { background: #fff; border-radius: var(--radius); box-shadow: 0 10px 24px rgba(0,0,0,0.06); padding: 20px; }
    h1 { font-size: 22px; margin: 0 0 12px; }
    .muted { color: #555; font-size: 14px; margin-bottom: 18px; }
    label { display:block; font-weight:600; margin: 10px 0 6px; }
    input[type="text"] { width: 100%; padding: 12px 14px; border: 1px solid #ddd; border-radius: 10px; font-size: 15px; }
    .days { display: grid; gap: 14px; grid-template-columns: repeat(auto-fit, minmax(260px, 1fr)); margin-top: 16px; }
    .day { border: 1px solid #eee; border-radius: 12px; padding: 12px; background:#fff; }
    .day h3 { margin: 0 0 10px; font-size: 16px; }
    .slot { display:flex; gap:8px; align-items:center; margin: 6px 0; }
    .slot input[type="time"] { flex:1; padding: 8px; border:1px solid #ddd; border-radius:10px; font-size:14px; }
    .slot button { border:0; background:#eee; border-radius:10px; padding: 8px 10px; cursor:pointer; }
    .addbtn { margin-top: 8px; background: #111; color:#fff; padding: 8px 10px; border-radius: 10px; font-size: 13px; cursor:pointer; }
    .actions { display:flex; gap:10px; margin-top: 18px; }
    .submit { background:#2563eb; color:#fff; border:0; padding:12px 16px; border-radius:12px; font-weight:600; cursor:pointer; }
    .ghost  { background:#efefef; color:#111; border:0; padding:12px 16px; border-radius:12px; cursor:pointer; }
    .note { font-size: 13px; color:#444; margin-top: 12px; }
    .ok { background: #e7f7ec; border-left: 4px solid #16a34a; padding: 10px 12px; border-radius: 8px; margin-top: 14px; display:none; }
    .err { background: #fdeaea; border-left: 4px solid #dc2626; padding: 10px 12px; border-radius: 8px; margin-top: 14px; display:none; white-space:pre-wrap;}
  </style>
</head>
<body>
  <div class="wrap">
    <div class="card">
      <h1>Điền lịch làm việc</h1>
      <div class="muted">
        Nhập <b>Họ và tên</b> và chọn các <b>khung giờ</b> cho từng ngày (có thể thêm nhiều khung).
        Phút sẽ được làm tròn: ≤15 → :00; 15–&lt;45 → :30; ≥45 → tròn lên giờ.
        <br><b>Khung giờ hợp lệ:</b> 06:30 → 21:00.
      </div>

      <label for="name">Họ và tên</label>
      <input id="name" placeholder="Ví dụ: Nguyễn Văn A" />

      <div class="days" id="days"></div>

      <div class="actions">
        <button class="submit" id="submitBtn">Gửi lịch lên Google Sheet</button>
        <button class="ghost" id="resetBtn">Xoá tất cả</button>
      </div>
      <div class="note">Sau khi gửi, sheet mới sẽ được tạo (nếu chưa có) dựa trên sheet <b>MẪU</b> và tự động tô màu cam các ô thời gian trong sheet của bạn (06:30–21:00).</div>
      <div class="ok" id="okBox">Đã gửi! Mở Google Sheet để xem cập nhật.</div>
      <div class="err" id="errBox"></div>
    </div>
  </div>

  <script>
    // === ĐIỀN URL WEB APP CỦA APPS SCRIPT ===
    const WEB_APP_URL = 'https://script.google.com/macros/s/AKfycby1CQcmTTKdcMjq65HPGBwpkclFAfZnRhWnV88eGPD336cA71cM3Lr_u4RnFwizHFbM0w/exec';

    // Cấu hình khung giờ hợp lệ
    const TIME_MIN = '06:30';
    const TIME_MAX = '21:00';

    const DAY_LABELS = [
      ['thu2', 'Thứ 2'], ['thu3','Thứ 3'], ['thu4','Thứ 4'],
      ['thu5','Thứ 5'], ['thu6','Thứ 6'], ['thu7','Thứ 7'], ['cn','CN']
    ];

    const daysEl = document.getElementById('days');

    function toMinutes(hhmm) {
      const [h,m] = hhmm.split(':').map(x=>parseInt(x,10));
      return h*60 + m;
    }
    function fromMinutes(mins) {
      let h = Math.floor(mins/60), m = mins%60;
      const hh = (h<10?'0':'') + h;
      const mm = (m<10?'0':'') + m;
      return `${hh}:${mm}`;
    }
    function clampTime(hhmm) {
      if (!hhmm) return hhmm;
      let v = toMinutes(hhmm);
      const lo = toMinutes(TIME_MIN), hi = toMinutes(TIME_MAX);
      if (v < lo) v = lo;
      if (v > hi) v = hi;
      return fromMinutes(v);
    }
    // Làm tròn phút theo yêu cầu
    function roundToGrid(hhmm) {
      if (!hhmm) return hhmm;
      let [h, m] = hhmm.split(':').map(x=>parseInt(x,10));
      if (m <= 15) m = 0;
      else if (m < 45) m = 30;
      else { h = (h + 1) % 24; m = 0; }
      const hh = (h<10?'0':'') + h;
      const mm = (m<10?'0':'') + m;
      return `${hh}:${mm}`;
    }
    function roundedClamped(hhmm) {
      return clampTime(roundToGrid(hhmm));
    }

    function createDayCard(key, label) {
      const box = document.createElement('div');
      box.className = 'day';
      box.innerHTML = `<h3>${label}</h3><div class="slots"></div><button class="addbtn" type="button">+ Thêm khung giờ</button>`;
      const slotsEl = box.querySelector('.slots');
      const addBtn = box.querySelector('.addbtn');

      function attachTimeHandlers(inp) {
        // ràng buộc min/max + tự round + clamp
        inp.setAttribute('min', TIME_MIN);
        inp.setAttribute('max', TIME_MAX);
        inp.setAttribute('step', '900'); // 15 phút
        const apply = () => { inp.value = roundedClamped(inp.value); };
        inp.addEventListener('change', apply);
        inp.addEventListener('blur', apply);
      }

      function addSlot(from='07:00', to='09:00') {
        from = clampTime(from);
        to   = clampTime(to);
        const row = document.createElement('div');
        row.className = 'slot';
        row.innerHTML = `
          <input type="time" value="${from}" />
          <span>→</span>
          <input type="time" value="${to}" />
          <button type="button" title="Xoá">✕</button>
        `;
        const inputs = row.querySelectorAll('input[type="time"]');
        inputs.forEach(attachTimeHandlers);
        const delBtn = row.querySelector('button');
        delBtn.onclick = () => row.remove();
        slotsEl.appendChild(row);
      }

      addBtn.onclick = () => addSlot();
      return { box, getValue: () => {
        const slots = [];
        box.querySelectorAll('.slot').forEach(div => {
          const t1 = roundedClamped(div.querySelectorAll('input')[0].value);
          const t2 = roundedClamped(div.querySelectorAll('input')[1].value);
          if (t1 && t2) slots.push([t1, t2]);
        });
        return [key, normalizeAndSort(slots)];
      }};
    }

    function normalizeAndSort(slots) {
      const norm = slots.map(([s,e]) => {
        // đã round+clamp ở UI; đảm bảo s<e
        return [s,e];
      }).filter(([s,e]) => toMinutes(e) > toMinutes(s));

      norm.sort((A,B) => toMinutes(A[0]) - toMinutes(B[0]));
      // gộp nếu cần ở backend; ở đây chỉ chuẩn hoá
      return norm;
    }

    const dayCards = DAY_LABELS.map(([k,l]) => createDayCard(k,l));
    dayCards.forEach(d => daysEl.appendChild(d.box));

    function payloadFromUI() {
      const name = document.getElementById('name').value.trim();
      const days = {};
      dayCards.forEach(c => {
        const [key, slots] = c.getValue();
        days[key] = slots;
      });
      return { name, days };
    }

    // Gửi bằng form+iframe để tránh CORS preflight
    function postPayload(payload) {
      return new Promise((resolve, reject) => {
        try {
          const form = document.createElement('form');
          form.method = 'POST';
          form.action = WEB_APP_URL;
          form.style.display = 'none';

          const iframe = document.createElement('iframe');
          iframe.name = 'hidden_iframe';
          iframe.style.display = 'none';
          document.body.appendChild(iframe);
          form.target = 'hidden_iframe';

          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = 'payload';
          input.value = JSON.stringify(payload);
          form.appendChild(input);

          iframe.onload = () => { resolve(); setTimeout(()=>iframe.remove(), 1000); };
          document.body.appendChild(form);
          form.submit();
          setTimeout(() => form.remove(), 1000);
        } catch (e) { reject(e); }
      });
    }

    const okBox = document.getElementById('okBox');
    const errBox = document.getElementById('errBox');
    document.getElementById('submitBtn').onclick = async () => {
      okBox.style.display = 'none'; errBox.style.display = 'none';
      try {
        const payload = payloadFromUI();
        if (!payload.name) throw new Error('Vui lòng nhập Họ và tên');
        await postPayload(payload);
        okBox.style.display = 'block';
        okBox.textContent = 'Đã gửi! Mở Google Sheet để xem sheet của bạn được tạo/cập nhật và tô màu.';
      } catch (e) {
        errBox.style.display = 'block';
        errBox.textContent = 'Gửi thất bại:\n' + (e && e.message ? e.message : e);
      }
    };
    document.getElementById('resetBtn').onclick = () => {
      document.getElementById('name').value = '';
      document.querySelectorAll('.slots').forEach(x => x.innerHTML = '');
      okBox.style.display = 'none'; errBox.style.display = 'none';
    };
  </script>
</body>
</html>
